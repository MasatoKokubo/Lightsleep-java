= Lightsleep [small]#Release Notes#

link:ReleaseNotes_ja.asciidoc[Japanese]

[[TOC_]]
=== Table of Contents

- <<ReleaseNote4.0.1,[small]#version# 4.0.1 [small]#- July       9, 2022#>>
- <<ReleaseNote4.0.0,[small]#version# 4.0.0 [small]#- October    3, 2020#>>
- <<ReleaseNote3.2.0,[small]#version# 3.2.0 [small]#- September 25, 2019#>>
- <<ReleaseNote3.1.1,[small]#version# 3.1.1 [small]#- July      18, 2019#>>
- <<ReleaseNote3.1.0,[small]#version# 3.1.0 [small]#- July      16, 2019#>>
- <<ReleaseNote3.0.1,[small]#version# 3.0.1 [small]#- December   1, 2018#>>
- <<ReleaseNote3.0.0,[small]#version# 3.0.0 [small]#- October    7, 2018#>>
- <<ReleaseNote2.2.1,[small]#version# 2.2.1 [small]#- February  12, 2018#>>
- <<ReleaseNote2.2.0,[small]#version# 2.2.0 [small]#- February   4, 2018#>>
- <<ReleaseNote2.1.1,[small]#version# 2.1.1 [small]#- December   3, 2017#>>
- <<ReleaseNote2.1.0,[small]#version# 2.1.0 [small]#- November  12, 2017#>>
- <<ReleaseNote2.0.0,[small]#version# 2.0.0 [small]#- September  9, 2017#>>

[[ReleaseNote4.0.1]]

=== [small]#version# 4.0.1

* Improved error messages.

[[ReleaseNote4.0.0]]

=== [small]#version# 4.0.0

1. ** NEW Features **
  * You can now generate the following SQLs.
  ** `SELECT SQL` with `WITH` clauses +
    `[small gray]#WITH W1(\...) AS (#` +
    `[small gray]#&#xa0;&#xa0;SELECT \...#` +
    `[small gray]#)#` +
    `[small gray]#SELECT ... FROM W1 \...#`
  ** Recursive `SELECT SQL` +
    `[small gray]#WITH RECURSIVE W1(\...) AS (#` +
    `[small gray]#&#xa0;&#xa0;SELECT \...#` +
    `[small gray]#&#xa0;&#xa0;UNION ALL#` +
    `[small gray]#&#xa0;&#xa0;SELECT \...#` +
    `[small gray]#) SELECT \... FROM W1 \...#`
  ** `INSERT SQL` with subquery +
    `[small gray]#INSERT INTO \... (\...) SELECT \... FROM \...#`
  ** Join subqueries +
    `[small gray]#SELECT \... FROM \... INNER JOIN (SELECT \...) \...#`

1. **Added Methods**
  * `[small]#org.lightsleep.#[blue]##Sql##` class
  ** `[small]#String# [blue]#queryName#[small]##()##`
  ** `[small]#Sql<E># [blue]#innerJoin#[small]##(Sql<?> joinSql, String tableAlias, Condition on)##`
  ** `[small]#Sql<E># [blue]#innerJoin#[small]##(Sql<?> joinSql, String tableAlias, String on, Object... arguments)##`
  ** `[small]#Sql<E># [blue]#leftJoin#[small]##(Sql<?> joinSql, String tableAlias, Condition on)##`
  ** `[small]#Sql<E># [blue]#leftJoin#[small]##(Sql<?> joinSql, String tableAlias, String on, Object... arguments)##`
  ** `[small]#Sql<E># [blue]#rightJoin#[small]##(Sql<?> joinSql, String tableAlias, Condition on)##`
  ** `[small]#Sql<E># [blue]#rightJoin#[small]##(Sql<?> joinSql, String tableAlias, String on, Object... arguments)##`
  ** `[small]#Sql<E># [blue]#with#[small]##(Sql<?>... withSqls)##`
  ** `[small]#List<Sql<?>># [blue]#getWithSqls#[small]##()##`
  ** `[small]#boolean# [blue]#isWithSql#[small]##()##`
  ** `[small]#Sql<E># [blue]#recursive#[small]##(Sql<?> recursiveSql)##`
  ** `[small]#Sql<?># [blue]#getRecursiveSql#[small]##()##`
  ** `[small]#boolean# [blue]#isRecursiveSql#[small]##()##`
  ** `[small]#boolean# [blue]#isInInsertFrom#[small]##()##`
  ** `[small]#int# [blue]#insert#[small]##()##`

  * `[small]#org.lightsleep.database.#[blue]##Standard##` class
  ** `[small]#<E> void# [blue]#appendInsertColumns#[small]##(StringBuilder buff, Sql<E> sql)##`
  ** `[small]#<E> void# [blue]#appendInsertValues#[small]##(StringBuilder buff, Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> void# [blue]#appendUpdateColumnsAndValues#[small]##(StringBuilder buff, Sql<E> sql, List<Object> parameters)##`

  * `[small]#org.lightsleep.helper.#[blue]##JoinInfo<JE>##` class
  ** `[blue]#JoinInfo# [small]#(JoinType joinType, Sql<JE> joinSql, String tableAlias, Condition on)#`
  ** `[small]#Sql<JE># [blue]#joinSql#[small]##()##`

  * `[small]#org.lightsleep.helper.#[blue]##TypeConverter<ST, DT>##` class
  ** `[small]#static <ST, DT> TypeConverter<ST, DT># [blue]#of#[small]##(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, ? extends DT> function)##`
  ** `[small]#static <ST, MT, DT> TypeConverter<ST, DT># [blue]#of#[small]##(Map<String, TypeConverter<?, ?>> typeConverterMap, Class<ST> sourceType, Class<MT> middleType, Class<DT> destinType)##`
  ** `[small]#static <ST, MT, DT> TypeConverter<ST, DT># [blue]#of#[small]##(Map<String, TypeConverter<?, ?>> typeConverterMap, Class<ST> sourceType, Class<MT> middleType, Class<DT> destinType, Function<? super MT, ? extends DT> function)##`

1. **Deleted Interfaces**
  * `[small]#org.lightsleep.entity.#[blue]##Composite##`
  * `[small]#org.lightsleep.entity.#[blue]##PostLoad##`
  * `[small]#org.lightsleep.entity.#[blue]##PreStore##`

1. **Deleted Methods**
  * `[small]#org.lightsleep.#[blue]##Sql## [small]#class#`
  ** `[small]#Sql<E># [blue]#setColumns#[small]##(Set<String> propertyNames)##`
  ** `[small]#Sql<E># [blue]#setColumns#[small]##(Class<?> resultClass)##`
  ** `[small]#Sql<E># [blue]#doIf#[small]##(boolean condition, Consumer<Sql<E>> action, Consumer<Sql<E>> elseAction)##`

1. **Methods with modified argument or return value**
  * `[small]#org.lightsleep.database.#[blue]##Database<ST, DT>## [small]##interface##`
  ** `[small]#<E> String# [blue]#selectSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#selectSql#[small]##(Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> String# [blue]#subSelectSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E,# [small red]#OE> CharSequence# [blue]#subSelectSql#[small]##(Sql<E> sql,## [small red]#Sql<OE> outerSql,# [small]#List<Object> parameters)#`
  ** `[small]#<E> String# [blue]#subSelectSql#[small]##(Sql<E> sql, Supplier<CharSequence> columnsSupplier, List<Object> parameters)##` +
  -> `[small]#<E,# [small red]#OE> CharSequence# [blue]#subSelectSql#[small]##(Sql<E> sql,## [small red]#Sql<OE> outerSql,# [small]#Supplier<CharSequence> columnsSupplier, List<Object> parameters)#`
  ** `[small]#<E> String# [blue]#insertSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#insertSql#[small]##(Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> String# [blue]#updateSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#updateSql#[small]##(Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> String# [blue]#deleteSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#deleteSql#[small]##(Sql<E> sql, List<Object> parameters)##`

[[ReleaseNote3.2.0]]

=== [small]#version# 3.2.0

1. **Added Interfaces**
  * `[small]#org.lightsleep.entity.#[blue]##PostDelete##`
  * `[small]#org.lightsleep.entity.#[blue]##PostInsert##`
  * `[small]#org.lightsleep.entity.#[blue]##PostSelect##`
  * `[small]#org.lightsleep.entity.#[blue]##PostUpdate##`
  * `[small]#org.lightsleep.entity.#[blue]##PreDelete##`
  * `[small]#org.lightsleep.entity.#[blue]##PreUpdate##`

1. **Added Classes**
  * `[small]#org.lightsleep.database.#[blue]##MariaDB##`
  * `[small]#org.lightsleep.database.anchor.#[blue]##mariadb##`

1. **Specification Changes**
  * Changed the return type of `[small]##org.lightsleep.entity.##[blue]##PreInsert##` method of `[blue]#preInsert#` interface from `[blue]#int#` to `[blue]#void#`.
  * Changed the return type of `[blue]#postInsert#`, `[blue]#postUpdate#` and `[blue]#postDelete#` method of `[small]##org.lightsleep.entity.##[blue]##Composite##` interface from `[blue]#int#` to `[blue]#void#`.
  * Changed `[small]##org.lightsleep.database.##[blue]##DB2##` class to `[blue]#Db2#`.

1. **Deprecated Interfaces**
  * `[small]#org.lightsleep.entity.#[blue]##Composite##`
  * `[small]#org.lightsleep.entity.#[blue]##PostLoad##`
  * `[small]#org.lightsleep.entity.#[blue]##PreStore##`

[[ReleaseNote3.1.1]]

=== [small]#version# 3.1.1

1. **Bug Fix**
  * Can not refer to column names of the table joined to the main table from the subquery condition.

[[ReleaseNote3.1.0]]

=== [small]#version# 3.1.0

1. **NEW Features**
  * You can now generate `SELECT SQL` using subqueries in the `FROM` clause.
  * You can now generate `UNION SQL`

1. **Specification Change**
  * Changed the specification when calling the `[small]##org.lightsleep.##Sql#columns(String \...)` method multiple times. +
    **Prior to this version:** Columns of the argument value are accumulated. +
    **This version:** Replaced by the columns of the argument value.

1. **Added Methods**
  * `[small]#org.lightsleep.#[blue]##Sql##` class
  ** `[small]#Sql<E># [blue]#columns#[small]##(Collection<String> propertyNames)##`
  ** `[small]#<RE> Sql<E># [blue]#columns#[small]##(Class<RE> resultClass)##`
  ** `[small]#Sql<E># [blue]#from#[small]##(Sql<?> fromSql)##`
  ** `[small]#Sql<?># [blue]#getFrom#[small]##()##`
  ** `[small]#<SE> Sql<E># [blue]#where#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<SE> Sql<E># [blue]#and#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<SE> Sql<E># [blue]#or#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<SE> Sql<E># [blue]#having#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<UE> Sql<E># [blue]#union#[small]##(Sql<UE> unionSql)##`
  ** `[small]#<UE> Sql<E># [blue]#unionAll#[small]##(Sql<UE> unionSql)##`
  ** `[small]#List<Sql<?>># [blue]#getUnionSqls#[small]##()##`
  ** `[small]#boolean# [blue]#isUnionAll#[small]##()##`

  * `[small]#org.lightsleep.#[blue]##Condition##` [small]#interface#
  ** `[small]#static <E, SE> Condition# [blue]#of#[small]##(Sql<E> outerSql, Sql<SE> subSql, String content)##`
  ** `[small]#default <K> Condition# [blue]#and#[small]##(K entity)##`
  ** `[small]#default <E, SE> Condition# [blue]#and#[small]##(Sql<E> outerSql, Sql<SE> subSql, String content)##`
  ** `[small]#default <K> Condition# [blue]#or#[small]##(K entity)##`
  ** `[small]#default <E, SE> Condition# [blue]#or#[small]##(Sql<E> outerSql, Sql<SE> subSql, String content)##`

  * `[small]#org.lightsleep.component.#[blue]##SubqueryCondition##` class
  ** `[small]#<E># [blue]#SubqueryCondition#[small]##(Sql<E> outerSql, Sql<SE> subSql, Expression expression)##`

1. **Deprecated Methods**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[blue]#setColumns#[small]##(Set<String> propertyNames)##`
  ** `[blue]#setColumns#[small]##(Class<?> resultClass)##`

[[ReleaseNote3.0.1]]

=== [small]#version# 3.0.1

1. **Changes**
  * When using the `SQLServer` database handler, string literals containing the character code of `U+0080` and above are now generated with `N` prefix (e.g. `N'漢字'`).
  * When using the `SQLite` database handler, literals of `byte[]` are now generated in the `X'hhhhhh'` format if the array length does not exceed the `maxBinaryLiteralLength`.

[[ReleaseNote3.0.0]]

=== [small]#version# 3.0.0

1. **Improvement**
  * Supported the following data types. You can use them as a field type for entity classes.
  ** `[small]##java.time.##LocalDate`
  ** `[small]##java.time.##LocalTime`
  ** `[small]##java.time.##LocalDateTime`
  ** `[small]##java.time.##OffsetDateTime`
  ** `[small]##java.time.##ZonedDateTime`
  ** `[small]##java.time.##Instant`

1. **Added Methods and Constructors**
  * `[small]#org.lightsleep.#[blue]##Sql##` class
  ** `[blue]#doNotIf#[small]##(boolean condition, Consumer<Sql<E>> action)##`
  ** `[blue]#doElse#[small]##(Consumer<Sql<E>> elseAction)##`
  ** `[blue]#executeUpdate#[small]##(String sql)##`

  * `[small]#org.lightsleep.database.#[blue]##Database##` [small]#interface and classes implementing it#
  ** `[blue]#getObject#[small]##(Connection connection, ResultSet resultSet, String columnLabel)##`

  * `[small]#org.lightsleep.helper.#[blue]##ConvertException##` class
  ** `[blue]#ConvertException#[small]##(Class<?> sourceType, Object source, Class<?> destinType, Throwable cause)##`

  * `[small]#org.lightsleep.helper.#[blue]##TypeConverter##` class
  ** `[blue]#TypeConverter#[small]##(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, MT> function1, Function<? super MT, ? extends DT> function2)##`
  ** `[blue]#TypeConverter#[small]##(Class<ST> sourceType, Class<DT> destinType,Function<? super ST, ? extends MT1> function1, Function<? super MT1, ? extends MT2> function2, Function<? super MT2, ? extends DT> function3)##`
  ** `[blue]#TypeConverter#[small]##(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, MT1> function1, Function<? super MT1, ? extends MT2> function2, Function<? super MT2, ? extends MT3> function3, Function<? super MT3, ? extends DT> function4)##`

1. **Deprecated Method**
  * `[small]#org.lightsleep.#[blue]##Sql##` class
  ** `[blue]#doIf#[small]##(boolean condition, Consumer<Sql<E>> action, Consumer<Sql<E>> elseAction)##`

1. **Deleted** Methods and Constructor
  * `[small]#org.lightsleep.#[blue]##Sql##` class
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super  E > consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3, Consumer<? super JE4> consumer4)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection)##`
  ** `[blue]#selectCount#[small]##(ConnectionWrapper connection)##`
  ** `[blue]#insert#[small]##(ConnectionWrapper connection, E entity)##`
  ** `[blue]#insert#[small]##(ConnectionWrapper connection, Iterable<? extends E> entities)##`
  ** `[blue]#update#[small]##(ConnectionWrapper connection, E entity)##`
  ** `[blue]#update#[small]##(ConnectionWrapper connection, Iterable<? extends E> entities)##`
  ** `[blue]#delete#[small]##(ConnectionWrapper connection)##`
  ** `[blue]#delete#[small]##(ConnectionWrapper connection, E entity)##`
  ** `[blue]#delete#[small]##(ConnectionWrapper connection, Iterable<? extends E> entities)##`

  * `[small]#org.lightsleep.database.#[blue]##DB2##`, `[blue]#MySQL#`, `[blue]#Oracle#`, `[blue]#PostgreSQL#`, `[blue]#SQLite#`, `[blue]#SQLServer#` and `[blue]#Standard#` class
  ** `[blue]#instance#[small]##()##`

  * `[small]#org.lightsleep.helper#[blue]##TypeConverter##` class
  ** `[blue]#TypeConverter#[small]##(TypeConverter<ST, MT> typeConverter1, TypeConverter<MT, DT> typeConverter2)##`

[[ReleaseNote2.2.1]]

=== [small]#version# 2.2.1

1. **Bug fix**
  * [Fixed] Lightsleep does not work unless the Oracle JDBC driver jar is in the classpath.

<<TOC_,To TOC>>

[[ReleaseNote2.2.0]]

=== [small]#version# 2.2.0

1. **Improvements**
  * *Added* an option to include JDBC URL of the connection to SQL logs. +
    Example of use:::
    Add the following to `lightsleep.properties` file +
    `connectionLogFormat = [{0}/{1}/{2}]`

  * The password parts of the logs are masked with `"xxxx"`.

1. *Added* `maskPassword` method to the `Database` interface and its implementation classes.

<<TOC_,To TOC>>

[[ReleaseNote2.1.1]]

=== [small]#version# 2.1.1

1. **Bug fix**
  * [Fixed] `[blue]#Standard#` database handler is always selected when connection supplier is `[blue]#Jndi#`.

1. **Other**
  * Improve log messages

<<TOC_,To TOC>>

[[ReleaseNote2.1.0]]

=== [small]#version# 2.1.0

Version number is a minor release, but there are **some specification changes**.

1. **Enabled** the definition of multiple JDBC URLs in the `lightsleep.properties` file.

1. Database handler classes corresponding to JDBC URLs are now **automatically determined**, and **disabled** the `Database` property in `lightsleep.properties` file. **(Specification change)**


1. **Added** the following methods and constructor.
  * `[small]#org.lightsleep.#[blue]##Sql##` class
  ** `[small]#public ConnectionWrapper# [blue]#getConnection#[small]##()##`

  * `[small]#org.lightsleep.connection.#[blue]##ConnectionSupplier##` [small]#interface#
  ** `[small]#Database# [blue]#getDatabase#[small]##()##`
  ** `[small]#DataSource# [blue]#getDataSource#[small]##()##`
  ** `[small]#String# [blue]#getUrl#[small]##()##`
  ** `[small]#static ConnectionSupplier# [blue]#of#[small]##(String supplierName, Properties properties)##`
  ** `[small]#static ConnectionSupplier# [blue]#find#[small]##(String... urlWords)##`

  * `[small]#org.lightsleep.connection.#[blue]##AbstractConnectionSupplier##` [small]#abstract class#
  ** `[small]#protected# [blue]#AbstractConnectionSupplier#[small]##(Properties properties, Consumer<Properties> modifier)##`
  ** `[small]#@Override public Database# [blue]#getDatabase#[small]##()##`
  ** `[small]#@Override public String# [blue]#getUrl#[small]##()##`
  ** `[small]#@Override public String# [blue]#toString#[small]##()##`

  * `[small]#org.lightsleep.database.#[blue]##Database##` [small]#interface#
  ** `[small]#static Database# [blue]#getInstance#[small]##(String jdbcUrl)##`

  * `[small]#org.lightsleep.helper.#[blue]##Resource##` class
  ** `[small]#public static Resource# [blue]#getGlobal#[small]##()##`

1. **Deleted** the following methods of the `[small]#org.lightsleep.#[blue]##Sql##` *class*. **(Specification change)**
  * `[small]#public static Database# [blue]#getDatabase#[small]##()##`
  * `[small]#public static void# [blue]#setDatabase#[small]##(Database database)##`
  * `[small]#public static ConnectionSupplier# [blue]#getConnectionSupplier#[small]##()##`
  * `[small]#public static void# [blue]#setConnectionSupplier#[small]##(ConnectionSupplier supplier)##`

1. **Added** the `[small]#org.lightsleep.connection.#[blue]##ConnectionWrapper##` class, and **changed** the argument type of each method from `[small]#java.sql.#[blue]##Connection##` to `[blue]#ConnectionWrapper#`. **(Specification change)**

1. **Added** a constructor with `Properties properties` argument to each class of the `[blue small]#org.lightsleep.connection#` package.

1. **Added** the `[blue small]#org.lightsleep.database.anchor#` package and `[blue]#db2#`, `[blue]#mysql#`, `[blue]#oracle#`, `[blue]#postgresql#`, `[blue]#sqlite#` and `[blue]#sqlserver#` classes. These classes are used to find the corresponding database handler class from the JDBC URL.

1. **Deprecated** the `[blue]#instance#[small]##()##` methods and **added** `[blue]#instance#` static variables of each class in the `[blue small]#org.lightsleep.database#` package.

<<TOC_,To TOC>>

[[ReleaseNote2.0.0]]

=== [small]#version# 2.0.0

1. Added the following method to get the result of SELECT SQL with entity type different from type parameter of `[small]#org.lightsleep.#[blue]##Sql##` class.
  * `[small]#public <R> Optional<R># [blue]#selectAs#[small]##(Class<R> resultClass)##`
  * `[small]#public <R> void# [blue]#selectAs#[small]##(Class<R> resultClass, Consumer<? super R> consumer)##`

1. **Deprecated** the method with the `[blue]#Connection#` argument of the `[small]#org.lightsleep.#[blue]##Sql##` class and **added** the following method with no `[blue]#Connection#` argument.
  * `[small]#public void# [blue]#select#[small]##(Consumer<? super E> consumer)##`
  * `[small]#public <JE1> void# [blue]#select#[small]##(Consumer<? super E> consumer, Consumer<? super JE1> consumer1)##`
  * `[small]#public <JE1, JE2> void# [blue]#select#[small]##(Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2)##`
  * `[small]#public <JE1, JE2, JE3> void# [blue]#select#[small]##(Consumer<? super  E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3)##`
  * `[small]#public <JE1, JE2, JE3, JE4> void# [blue]#select#[small]##(Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3, Consumer<? super JE4> consumer4)##`
  * `[small]#public Optional<E># [blue]#select#[small]##()##`
  * `[small]#public int# [blue]#selectCount#[small]##()##`
  * `[small]#public int# [blue]#insert#[small]##(E entity)##`
  * `[small]#public int# [blue]#insert#[small]##(Iterable<? extends E> entities)##`
  * `[small]#public int# [blue]#update#[small]##(E entity)##`
  * `[small]#public int# [blue]#update#[small]##(Iterable<? extends E> entities)##`
  * `[small]#public int# [blue]#delete#[small]##()##`
  * `[small]#public int# [blue]#delete#[small]##(E entity)##`
  * `[small]#public int# [blue]#delete#[small]##(Iterable<? extends E> entities)##`

1. **Added** the following method to the `[small]#org.lightsleep.#[blue]##Sql##` class.
  * `[small]#public Sql<E># [blue]#connection#[small]##(Connection connection)##`
  * `[small]#public <R> Sql<E># [blue]#setColumns#[small]##(Class<R> resultClass)##`
  * `[small]#public Sql<E># [blue]#doAlways#[small]##(Consumer<Sql<E>> action)##`

1. The `[small]#org.lightsleep.#[blue]##Sql##` class now **implements** the `[blue]#Cloneable#` interface.

1. **Changed** the specification of the argument of the `where` method of the `[small]#org.lightsleep.#[blue]##Sql##` class **(Specification change)**
```
public Sql<E> where(E entity)
    ↓
public <K> Sql<E> where(K entity)
```

1. **Deleted** `[blue]#@Inherited#` attached to `[blue]#Table#` annotation class. **(Specification change)**

1. **Added** `value` property to `[blue]#Key#`, `[blue]#NonColumn#`, `[blue]#NonInsert#`, `[blue]#NonSelect#` and `[blue]#NonUpdate#` annotation classes.

1. **Added** a `property` property to the `[blue]#NonColumnProperty#`, `[blue]#NonInsertProperty#`, `[blue]#NonSelectProperty#` and `[blue]#NonUpdateProperty#` annotation classes and changed the specification of the `[blue]#value#` property. **(Specification change)**

1. **Changed** the exception thrown on `[blue]#toString#` of `[small]#org.lightsleep.component.#[blue]##Expression##` class when number of `{}` in the content string and arguments dose not match from `[blue]#IllegalArgumentException#` to `[blue]#MissingArgumentsException#` *(new class)*. **(Specification change)**

1. **Changed** the exception thrown on `[blue]#getField#`, `[blue]#getValue#` and `[blue]#setValue#` methods of `[small]#org.lightsleep.helper.#[blue]##Accessor##` class from `[blue]#IllegalArgumentException#` to `[blue]#MissingPropertyException#` *(new class)*. **(Specification change)**

<<TOC_,To TOC>>

[gray]#_(C) 2016 Masato Kokubo_#
