= Lightsleep [small]#リリース･ノート#

link:ReleaseNotes.asciidoc[English]

[[TOC_]]
=== 目次

- <<ReleaseNote4.0.1,[small]#バージョン# 4.0.1 [small]#- 2022/7/9#>>
- <<ReleaseNote4.0.0,[small]#バージョン# 4.0.0 [small]#- 2020/10/3#>>
- <<ReleaseNote3.2.0,[small]#バージョン# 3.2.0 [small]#- 2019/9/25#>>
- <<ReleaseNote3.1.1,[small]#バージョン# 3.1.1 [small]#- 2019/7/18#>>
- <<ReleaseNote3.1.0,[small]#バージョン# 3.1.0 [small]#- 2019/7/16#>>
- <<ReleaseNote3.0.1,[small]#バージョン# 3.0.1 [small]#- 2018/12/1#>>
- <<ReleaseNote3.0.0,[small]#バージョン# 3.0.0 [small]#- 2018/10/7#>>
- <<ReleaseNote2.2.1,[small]#バージョン# 2.2.1 [small]#- 2018/2/12#>>
- <<ReleaseNote2.2.0,[small]#バージョン# 2.2.0 [small]#- 2018/2/4#>>
- <<ReleaseNote2.1.1,[small]#バージョン# 2.1.1 [small]#- 2017/12/3#>>
- <<ReleaseNote2.1.0,[small]#バージョン# 2.1.0 [small]#- 2017/11/12#>>
- <<ReleaseNote2.0.0,[small]#バージョン# 2.0.0 [small]#- 2017/9/9#>>

[[ReleaseNote4.0.1]]

=== [small]#バージョン# 4.0.1

* エラーメッセージを改善しました。

[[ReleaseNote4.0.0]]

=== [small]#バージョン# 4.0.0

1. **新機能**
  * 以下のSQLを生成できるようになりました。
  ** ``WITH``句付き``SELECT SQL`` +
    `[small gray]#WITH W1(\...) AS (#` +
    `[small gray]#&#xa0;&#xa0;SELECT \...#` +
    `[small gray]#)#` +
    `[small gray]#SELECT ... FROM W1 \...#`
  ** 再帰``SELECT SQL`` +
    `[small gray]#WITH RECURSIVE W1(\...) AS (#` +
    `[small gray]#&#xa0;&#xa0;SELECT \...#` +
    `[small gray]#&#xa0;&#xa0;UNION ALL#` +
    `[small gray]#&#xa0;&#xa0;SELECT \...#` +
    `[small gray]#) SELECT \... FROM W1 \...#`
  ** サブクエリ付き``INSERT SQL`` +
    `[small gray]#INSERT INTO \... (\...) SELECT \... FROM \...#`
  ** サブクエリの結合
    `[small gray]#SELECT \... FROM \... INNER JOIN (SELECT \...) \...#`

1. **追加されたメソッド(コンストラクタ)**
  * `[small]#org.lightsleep.#[blue]##Sql##`[small]##クラス##
  ** `[small]#String# [blue]#queryName#[small]##()##`
  ** `[small]#Sql<E># [blue]#innerJoin#[small]##(Sql<?> joinSql, String tableAlias, Condition on)##`
  ** `[small]#Sql<E># [blue]#innerJoin#[small]##(Sql<?> joinSql, String tableAlias, String on, Object... arguments)##`
  ** `[small]#Sql<E># [blue]#leftJoin#[small]##(Sql<?> joinSql, String tableAlias, Condition on)##`
  ** `[small]#Sql<E># [blue]#leftJoin#[small]##(Sql<?> joinSql, String tableAlias, String on, Object... arguments)##`
  ** `[small]#Sql<E># [blue]#rightJoin#[small]##(Sql<?> joinSql, String tableAlias, Condition on)##`
  ** `[small]#Sql<E># [blue]#rightJoin#[small]##(Sql<?> joinSql, String tableAlias, String on, Object... arguments)##`
  ** `[small]#Sql<E># [blue]#with#[small]##(Sql<?>... withSqls)##`
  ** `[small]#List<Sql<?>># [blue]#getWithSqls#[small]##()##`
  ** `[small]#boolean# [blue]#isWithSql#[small]##()##`
  ** `[small]#Sql<E># [blue]#recursive#[small]##(Sql<?> recursiveSql)##`
  ** `[small]#Sql<?># [blue]#getRecursiveSql#[small]##()##`
  ** `[small]#boolean# [blue]#isRecursiveSql#[small]##()##`
  ** `[small]#boolean# [blue]#isInInsertFrom#[small]##()##`
  ** `[small]#int# [blue]#insert#[small]##()##`

  * `[small]#org.lightsleep.database.#[blue]##Standard##`[small]##クラス##
  ** `[small]#<E> void# [blue]#appendInsertColumns#[small]##(StringBuilder buff, Sql<E> sql)##`
  ** `[small]#<E> void# [blue]#appendInsertValues#[small]##(StringBuilder buff, Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> void# [blue]#appendUpdateColumnsAndValues#[small]##(StringBuilder buff, Sql<E> sql, List<Object> parameters)##`

  * `[small]#org.lightsleep.helper.#[blue]##JoinInfo<JE>##`[small]##クラス##
  ** `[blue]#JoinInfo# [small]#(JoinType joinType, Sql<JE> joinSql, String tableAlias, Condition on)#`
  ** `[small]#Sql<JE># [blue]#joinSql#[small]##()##`

  * `[small]#org.lightsleep.helper.#[blue]##TypeConverter<ST, DT>##`[small]##クラス##
  ** `[small]#static <ST, DT> TypeConverter<ST, DT># [blue]#of#[small]##(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, ? extends DT> function)##`
  ** `[small]#static <ST, MT, DT> TypeConverter<ST, DT># [blue]#of#[small]##(Map<String, TypeConverter<?, ?>> typeConverterMap, Class<ST> sourceType, Class<MT> middleType, Class<DT> destinType)##`
  ** `[small]#static <ST, MT, DT> TypeConverter<ST, DT># [blue]#of#[small]##(Map<String, TypeConverter<?, ?>> typeConverterMap, Class<ST> sourceType, Class<MT> middleType, Class<DT> destinType, Function<? super MT, ? extends DT> function)##`

1. **削除されたインタフェース**
  * `[small]#org.lightsleep.entity.#[blue]##Composite##`
  * `[small]#org.lightsleep.entity.#[blue]##PostLoad##`
  * `[small]#org.lightsleep.entity.#[blue]##PreStore##`

1. **削除されたメソッド**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[small]#Sql<E># [blue]#setColumns#[small]##(Set<String> propertyNames)##`
  ** `[small]#Sql<E># [blue]#setColumns#[small]##(Class<?> resultClass)##`
  ** `[small]#Sql<E># [blue]#doIf#[small]##(boolean condition, Consumer<Sql<E>> action, Consumer<Sql<E>> elseAction)##`

1. **引数または戻り値が変更されたメソッド**
  * `[small]#org.lightsleep.database.#[blue]##Database<ST, DT>##`[small]##インタフェース##
  ** `[small]#<E> String# [blue]#selectSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#selectSql#[small]##(Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> String# [blue]#subSelectSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E,# [small red]#OE> CharSequence# [blue]#subSelectSql#[small]##(Sql<E> sql,## [small red]#Sql<OE> outerSql,# [small]#List<Object> parameters)#`
  ** `[small]#<E> String# [blue]#subSelectSql#[small]##(Sql<E> sql, Supplier<CharSequence> columnsSupplier, List<Object> parameters)##` +
  -> `[small]#<E,# [small red]#OE> CharSequence# [blue]#subSelectSql#[small]##(Sql<E> sql,## [small red]#Sql<OE> outerSql,# [small]#Supplier<CharSequence> columnsSupplier, List<Object> parameters)#`
  ** `[small]#<E> String# [blue]#insertSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#insertSql#[small]##(Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> String# [blue]#updateSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#updateSql#[small]##(Sql<E> sql, List<Object> parameters)##`
  ** `[small]#<E> String# [blue]#deleteSql#[small]##(Sql<E> sql, List<Object> parameters)##` +
  -> `[small]#<E># [small red]#CharSequence# [blue]#deleteSql#[small]##(Sql<E> sql, List<Object> parameters)##`

[[ReleaseNote3.2.0]]

=== [small]#バージョン# 3.2.0

1. **追加されたインタフェース**
  * `[small]#org.lightsleep.entity.#[blue]##PostDelete##`
  * `[small]#org.lightsleep.entity.#[blue]##PostInsert##`
  * `[small]#org.lightsleep.entity.#[blue]##PostSelect##`
  * `[small]#org.lightsleep.entity.#[blue]##PostUpdate##`
  * `[small]#org.lightsleep.entity.#[blue]##PreDelete##`
  * `[small]#org.lightsleep.entity.#[blue]##PreUpdate##`

1. **追加されたクラス**
  * `[small]#org.lightsleep.database.#[blue]##MariaDB##`
  * `[small]#org.lightsleep.database.anchor.#[blue]##mariadb##`

1. **仕様変更**
  * ``[small]##org.lightsleep.entity.##[blue]##PreInsert##``インタフェースの``[blue]#preInsert#``メソッドの戻り値型を``[blue]#int#``から``[blue]#void#``に変更しました。
  * ``[small]##org.lightsleep.entity.##[blue]##Composite##``インタフェースの``[blue]#postInsert#``,  ``[blue]#postUpdate#``および``[blue]#postDelete#``メソッドの戻り値型を``[blue]#int#``から``[blue]#void#``に変更しました。
  * ``[small]##org.lightsleep.database.##[blue]##DB2##``クラスを``[blue]#Db2#``に変更しました。

1. **非推奨になったインタフェース**
  * `[small]#org.lightsleep.entity.#[blue]##Composite##`
  * `[small]#org.lightsleep.entity.#[blue]##PostLoad##`
  * `[small]#org.lightsleep.entity.#[blue]##PreStore##`

[[ReleaseNote3.1.1]]

=== [small]#バージョン# 3.1.1

1. **バグ修正**
  * サブクエリ条件からメインテーブルに結合しているテーブルのカラム名が参照できない。

[[ReleaseNote3.1.0]]

=== [small]#バージョン# 3.1.0

1. **新機能**
  * ``FROM``句にサブクエリを使用した``SELECT SQL``の生成
  * ``UNION SQL``の生成

1. **仕様変更**
  * ``[small]##org.lightsleep.##Sql#columns(String \...)``メソッドを複数回呼び出した場合の仕様を変更しました。 +
  **本バージョンより前:** 引数のカラム配列が累積される。 +
  **本バージョン:** 引数のカラム配列に置き換えられる。

1. **追加されたメソッド**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[small]#Sql<E># [blue]#columns#[small]##(Collection<String> propertyNames)##`
  ** `[small]#<RE> Sql<E># [blue]#columns#[small]##(Class<RE> resultClass)##`
  ** `[small]#Sql<E># [blue]#from#[small]##(Sql<?> fromSql)##`
  ** `[small]#Sql<?># [blue]#getFrom#[small]##()##`
  ** `[small]#<SE> Sql<E># [blue]#where#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<SE> Sql<E># [blue]#and#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<SE> Sql<E># [blue]#or#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<SE> Sql<E># [blue]#having#[small]##(Sql<SE> subSql, String content)##`
  ** `[small]#<UE> Sql<E># [blue]#union#[small]##(Sql<UE> unionSql)##`
  ** `[small]#<UE> Sql<E># [blue]#unionAll#[small]##(Sql<UE> unionSql)##`
  ** `[small]#List<Sql<?>># [blue]#getUnionSqls#[small]##()##`
  ** `[small]#boolean# [blue]#isUnionAll#[small]##()##`

  * ``[small]#org.lightsleep.#[blue]##Condition##``[small]#インターフェース#
  ** `[small]#static <E, SE> Condition# [blue]#of#[small]##(Sql<E> outerSql, Sql<SE> subSql, String content)##`
  ** `[small]#default <K> Condition# [blue]#and#[small]##(K entity)##`
  ** `[small]#default <E, SE> Condition# [blue]#and#[small]##(Sql<E> outerSql, Sql<SE> subSql, String content)##`
  ** `[small]#default <K> Condition# [blue]#or#[small]##(K entity)##`
  ** `[small]#default <E, SE> Condition# [blue]#or#[small]##(Sql<E> outerSql, Sql<SE> subSql, String content)##`

  * ``[small]#org.lightsleep.component.#[blue]##SubqueryCondition##``[small]#クラス#
  ** `[small]#<E># [blue]#SubqueryCondition#[small]##(Sql<E> outerSql, Sql<SE> subSql, Expression expression)##`

1. **非推奨になったメソッド**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[blue]#setColumns#[small]##(Set<String> propertyNames)##`
  ** `[blue]#setColumns#[small]##(Class<?> resultClass)##`

[[ReleaseNote3.0.1]]

=== [small]#バージョン# 3.0.1

1. **変更**
  * `SQLServer` データベース･ハンドラを使用した場合、`U+0080` 以上の文字コードを含む文字列リテラルは、`N` プレフィックス付き(例 `N'漢字'`)で生成するようにしました。
  * `SQLite` データベース･ハンドラを使用した場合、`byte[]` のリテラルは、`X'hhhhhh'` 形式で生成するようにしました。(配列長が `maxBinaryLiteralLength` を超えない場合)

[[ReleaseNote3.0.0]]

=== [small]#バージョン# 3.0.0

1. **改善**
  * 以下のデータ型をサポートしました。エンティティクラスのフィールド型として使用できます。
  ** `[small]##java.time.##LocalDate`
  ** `[small]##java.time.##LocalTime`
  ** `[small]##java.time.##LocalDateTime`
  ** `[small]##java.time.##OffsetDateTime`
  ** `[small]##java.time.##ZonedDateTime`
  ** `[small]##java.time.##Instant`

1. **追加されたメソッドおよびコンストラクタ**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[blue]#doNotIf#[small]##(boolean condition, Consumer<Sql<E>> action)##`
  ** `[blue]#doElse#[small]##(Consumer<Sql<E>> elseAction)##`
  ** `[blue]#executeUpdate#[small]##(String sql)##`

  * ``[small]#org.lightsleep.database.#[blue]##Database##``[small]#インタフェースおよびこれをインプリメントしているクラス#
  ** `[blue]#getObject#[small]##(Connection connection, ResultSet resultSet, String columnLabel)##`

  * ``[small]#org.lightsleep.helper.#[blue]##ConvertException##``[small]#クラス#
  ** `[blue]#ConvertException#[small]##(Class<?> sourceType, Object source, Class<?> destinType, Throwable cause)##`

  * `[small]#org.lightsleep.helper.#[blue]##TypeConverter##`[small]#クラス#
  ** `[blue]#TypeConverter#[small]##(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, MT> function1, Function<? super MT, ? extends DT> function2)##`
  ** `[blue]#TypeConverter#[small]##(Class<ST> sourceType, Class<DT> destinType,Function<? super ST, ? extends MT1> function1, Function<? super MT1, ? extends MT2> function2, Function<? super MT2, ? extends DT> function3)##`
  ** `[blue]#TypeConverter#[small]##(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, MT1> function1, Function<? super MT1, ? extends MT2> function2, Function<? super MT2, ? extends MT3> function3, Function<? super MT3, ? extends DT> function4)##`

1. **非推奨になったメソッド**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[blue]#doIf#[small]##(boolean condition, Consumer<Sql<E>> action, Consumer<Sql<E>> elseAction)##`

1. **削除されたメソッドおよびコンストラクタ**
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super  E > consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3, Consumer<? super JE4> consumer4)##`
  ** `[blue]#select#[small]##(ConnectionWrapper connection)##`
  ** `[blue]#selectCount#[small]##(ConnectionWrapper connection)##`
  ** `[blue]#insert#[small]##(ConnectionWrapper connection, E entity)##`
  ** `[blue]#insert#[small]##(ConnectionWrapper connection, Iterable<? extends E> entities)##`
  ** `[blue]#update#[small]##(ConnectionWrapper connection, E entity)##`
  ** `[blue]#update#[small]##(ConnectionWrapper connection, Iterable<? extends E> entities)##`
  ** `[blue]#delete#[small]##(ConnectionWrapper connection)##`
  ** `[blue]#delete#[small]##(ConnectionWrapper connection, E entity)##`
  ** `[blue]#delete#[small]##(ConnectionWrapper connection, Iterable<? extends E> entities)##`

  * `[small]#org.lightsleep.database.#[blue]##DB2##`, `[blue]#MySQL#`, `[blue]#Oracle#`, `[blue]#PostgreSQL#`, `[blue]#SQLite#`, `[blue]#SQLServer#`, `[blue]#Standard#`[small]#クラス#
  ** `[blue]#instance#[small]##()##`

  * ``[small]#org.lightsleep.helper#[blue]##TypeConverter##``[small]#クラス#
  ** `[blue]#TypeConverter#[small]##(TypeConverter<ST, MT> typeConverter1, TypeConverter<MT, DT> typeConverter2)##`

<<TOC_,目次へ>>

[[ReleaseNote2.2.1]]

=== [small]#バージョン# 2.2.1

1. **バグ修正**
  * [修正済] OracleのJDBCドライバjarがクラスパスにないと動作しない。

<<TOC_,目次へ>>

[[ReleaseNote2.2.0]]

=== [small]#バージョン# 2.2.0

1. **改善**
  * SQLのログに接続先のJDBC URLを含めるオプションを *追加* しました。 +
    使用例:::
    ``lightsleep.properties``ファイルに以下を追加 +
    `connectionLogFormat = [{0}/{1}/{2}]`

  * ログのパスワード部分を``"xxxx"``でマスクするようにしました。

1. ``[blue]#Database#``インタフェースおよびその実装クラスに``[blue]#maskPassword#``メソッドを**追加**しました。

<<TOC_,目次へ>>

[[ReleaseNote2.1.1]]

=== [small]#バージョン# 2.1.1

1. **バグ修正**
  * [修正済] コネクション･サプライヤが``[blue]#Jndi#``の場合に常に``[blue]#Standard#``データベース･ハンドラが選択される。

1. **その他**
  * ログメッセージの改善

<<TOC_,目次へ>>

[[ReleaseNote2.1.0]]

=== [small]#バージョン# 2.1.0

バージョン番号はマイナー･リリースですが、**仕様変更があります**。

1. ``lightsleep.properties``ファイルに、複数のJDBC URLの定義を**可能**にしました。

1. JDBC URLに対応するデータベース･ハンドラ･クラス**は自動的に判断**するようにしました。これに伴い``lightsleep.properties``ファイルの``Database``プロパティを**無効**にしました。**(仕様変更)**

1. 以下のメソッド/コンストラクタを **追加** しました。
  * ``[small]#org.lightsleep.#[blue]##Sql##``[small]#クラス#
  ** `[small]#public ConnectionWrapper# [blue]#getConnection#[small]##()##`

  * ``[small]#org.lightsleep.connection.#[blue]##ConnectionSupplier##``[small]#インタフェース#
  ** `[small]#Database# [blue]#getDatabase#[small]##()##`
  ** `[small]#DataSource# [blue]#getDataSource#[small]##()##`
  ** `[small]#String# [blue]#getUrl#[small]##()##`
  ** `[small]#static ConnectionSupplier# [blue]#of#[small]##(String supplierName, Properties properties)##`
  ** `[small]#static ConnectionSupplier# [blue]#find#[small]##(String... urlWords)##`

  * ``[small]#org.lightsleep.connection.#[blue]##AbstractConnectionSupplier##``[small]#抽象クラス#
  ** `[small]#protected# [blue]#AbstractConnectionSupplier#[small]##(Properties properties, Consumer<Properties> modifier)##`
  ** `[small]#@Override public Database# [blue]#getDatabase#[small]##()##`
  ** `[small]#@Override public String# [blue]#getUrl#[small]##()##`
  ** `[small]#@Override public String# [blue]#toString#[small]##()##`

  * ``[small]#org.lightsleep.database.#[blue]##Database##``[small]#インタフェース#
  ** `[small]#static Database# [blue]#getInstance#[small]##(String jdbcUrl)##`

  * ``[small]#org.lightsleep.helper.#[blue]##Resource##``[small]#クラス#
  ** `[small]#public static Resource# [blue]#getGlobal#[small]##()##`

1. ``[small]#org.lightsleep.#[blue]##Sql##``クラスの以下のメソッドを**削除**しました。**(仕様変更)**
  * `[small]#public static Database# [blue]#getDatabase#[small]##()##`
  * `[small]#public static void# [blue]#setDatabase#[small]##(Database database)##`
  * `[small]#public static ConnectionSupplier# [blue]#getConnectionSupplier#[small]##()##`
  * `[small]#public static void# [blue]#setConnectionSupplier#[small]##(ConnectionSupplier supplier)##`

1. ``[small]#org.lightsleep.connection.#[blue]##ConnectionWrapper##``クラスを追加し、各メソッドの引数の型を``[small]#java.sql.#[blue]##Connection##``から``[blue]#ConnectionWrapper#``に**変更**しました。**(仕様変更)**

1. ``[blue small]#org.lightsleep.connection#``パッケージの各クラスに``Properties properties``を引数とするコンストラクタを**追加**しました。

1. ``[blue small]#org.lightsleep.database.anchor#``パッケージと``[blue]#db2#``, `[blue]#mysql#`, `[blue]#oracle#`, `[blue]#postgresql#`, `[blue]#sqlite#`, ``[blue]#sqlserver#``クラスを**追加**しました。これらのクラスは、JDBC URLから対応するデータベース･ハンドラ･クラスを見つける際に使用されます。

1. ``[blue small]#org.lightsleep.database#``パッケージの各クラスの``[blue]#instance#[small]##()##``メソッドを **非推奨** にし、``[blue]#instance#``静的変数を **追加** しました。

<<TOC_,目次へ>>

[[ReleaseNote2.0.0]]

=== [small]#バージョン# 2.0.0

1. ``[small]#org.lightsleep.#[blue]##Sql##``クラスの型パラメータとは異なるエンティティ型でSELECT SQLの結果を取得する以下のメソッドを**追加**しました。
  * `[small]#public <R> Optional<R># [blue]#selectAs#[small]##(Class<R> resultClass)##`
  * `[small]#public <R> void# [blue]#selectAs#[small]##(Class<R> resultClass, Consumer<? super R> consumer)##`

1. ``[small]#org.lightsleep.#[blue]##Sql##``クラスの``[blue]#Connection#``引数を持つメソッドを**非推奨**にし、``[blue]#Connection#``引数がない以下のメソッドを**追加**しました。
  * `[small]#public void# [blue]#select#[small]##(Consumer<? super E> consumer)##`
  * `[small]#public <JE1> void# [blue]#select#[small]##(Consumer<? super E> consumer, Consumer<? super JE1> consumer1)##`
  * `[small]#public <JE1, JE2> void# [blue]#select#[small]##(Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2)##`
  * `[small]#public <JE1, JE2, JE3> void# [blue]#select#[small]##(Consumer<? super  E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3)##`
  * `[small]#public <JE1, JE2, JE3, JE4> void# [blue]#select#[small]##(Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3, Consumer<? super JE4> consumer4)##`
  * `[small]#public Optional<E># [blue]#select#[small]##()##`
  * `[small]#public int# [blue]#selectCount#[small]##()##`
  * `[small]#public int# [blue]#insert#[small]##(E entity)##`
  * `[small]#public int# [blue]#insert#[small]##(Iterable<? extends E> entities)##`
  * `[small]#public int# [blue]#update#[small]##(E entity)##`
  * `[small]#public int# [blue]#update#[small]##(Iterable<? extends E> entities)##`
  * `[small]#public int# [blue]#delete#[small]##()##`
  * `[small]#public int# [blue]#delete#[small]##(E entity)##`
  * `[small]#public int# [blue]#delete#[small]##(Iterable<? extends E> entities)##`

1. ``[small]#org.lightsleep.#[blue]##Sql##``クラスに以下のメソッドを**追加**しました。
  * `[small]#public Sql<E># [blue]#connection#[small]##(Connection connection)##`
  * `[small]#public <R> Sql<E># [blue]#setColumns#[small]##(Class<R> resultClass)##`
  * `[small]#public Sql<E># [blue]#doAlways#[small]##(Consumer<Sql<E>> action)##`

1. ``[small]#org.lightsleep.#[blue]##Sql##``クラスが``[blue]#Cloneable#``インタフェースを**実装**するようにしました。

1. ``[small]#org.lightsleep.#[blue]##Sql##``クラスの``[blue]#where#``メソッドの引数の仕様を**変更**しました。**(仕様変更)**
```
public Sql<E> where(E entity)  
    ↓
public <K> Sql<E> where(K entity)  
```

1. ``[blue]#Table#``アノテーション･クラスに付与されていた``[blue]#@Inherited#``を**削除**しました。**(仕様変更)**

1. `[blue]#Key#`, `[blue]#NonColumn#`, `[blue]#NonInsert#`, `[blue]#NonSelect#`, ``[blue]#NonUpdate#``アノテーション･クラスに``[blue]#value#``プロパティを**追加**しました。

1. `[blue]#NonColumnProperty#`, `[blue]#NonInsertProperty#`, `[blue]#NonSelectProperty#`, ``[blue]#NonUpdateProperty#``アノテーション･クラスに``[blue]#property#``プロパティを**追加**し、``[blue]#value#``プロパティの仕様を**変更**しました。**(仕様変更)**

1. ``[small]#org.lightsleep.component.#[blue]##Expression##``クラスの``[blue]#toString#``において、内容文字列の``{}``と引数の数が不一致の際にスローする例外を``[blue]#IllegalArgumentException#``から``[blue]#MissingArgumentsException#``(新規追加)に**変更**にしました。**(仕様変更)**

1. ``[small]#org.lightsleep.helper.#[blue]##Accessor##``クラスの``[blue]#getField#``, `[blue]#getValue#`, ``[blue]#setValue#``メソッドでスローする例外を``[blue]#IllegalArgumentException#``から``[blue]#MissingPropertyException#``(新規追加)に**変更**にしました。**(仕様変更)**

<<TOC_,目次へ>>

[gray]#_(C) 2016 Masato Kokubo_#
